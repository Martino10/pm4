// pm4.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <iostream>
using namespace std;

/*
void hoofdmenu()
{
	bool again = true;
	while (again) {
		cout << "s[c]hoon, c[u]rsor, [r]andom, [n]ul, [i]nlezen, w[e]gschrijven, [w]ijzigen, [q]stoppen, [b]eschrijving, [p]rinten" << endl;
		char menuinput = cin.get();
		switch (menuinput) {
		case 'c': { test(); break; }
		case 'q': {again = false; break; }
		default: { break; }
		}//switch
		cin.get(); //Als er op enter wordt gedrukt gaat hij terug naar het hoofdmenu
	}

	//int hoofdmenu();
	//hoofdmenu();
}//hoofdmenu
*/

//het pointerboord
class grid {
public:
	//het getal dat erin staat
	int data;
	//de verwijzingen
	//windrichtingen voor duidelijkheid
	class grid* noord;
	class grid* noordoost;
	class grid* oost;
	class grid* zuidoost;
	class grid* zuid;
	class grid* zuidwest;
	class grid* west;
	class grid* noordwest;
	
};

class grid* head; //het begin
				   			   
//nieuwe pointer aan pointerbord toevoegen
class grid* newItem(int x) {
	class grid* newItem = new grid;
	newItem->data = x;
	newItem->noord = 0;
	newItem->noordoost = 0;
	newItem->oost = 0;
	newItem->zuidoost = 0;
	newItem->zuid = 0;
	newItem->zuidwest = 0;
	newItem->west = 0;
	newItem->noordwest = 0;
	return newItem;
}

//toevoegen aan de lijst
void ToevoegenLijst(int x) {
	//pointertje om de lijst mee door te lopen
	class grid* vorige = head;
	//de nieuwe pointer
	class grid* nieuwe = newItem(x);

	//als de lijst leeg is wordt dit het eerste item
	if (head == NULL) {
		head = nieuwe;
		return;
	}
	while (vorige->oost != NULL) vorige = vorige->oost; // Go To last Node
	vorige->oost = nieuwe;
	nieuwe->noord = vorige->noordoost;
	nieuwe->west = vorige;
	nieuwe->noordwest = vorige->noord;
}

void ToevoegenVer(int x) {
	//pointertje om de lijst mee door te lopen
	class grid* vorige = head;
	//de nieuwe pointer
	class grid* nieuwe = newItem(x);

	//als de lijst leeg is wordt dit het eerste item
	if (head == NULL) {
		head = nieuwe;
		return;
	}
	while (vorige->zuid != NULL) vorige = vorige->zuid; // Go To last Node
	vorige->zuid = nieuwe;
	nieuwe->noord = vorige;
	nieuwe->noordoost = vorige->oost;
	nieuwe->oost = vorige->zuidoost;
	nieuwe->west = vorige->zuidwest;
	nieuwe->noordwest = vorige->west;
}

void ToevoegenVer(int x, class grid* begin) {
	//pointertje om de lijst mee door te lopen
	class grid* vorige = begin;
	//de nieuwe pointer
	class grid* nieuwe = newItem(x);

	while (vorige->oost != NULL) vorige = vorige->oost; // Go To last Node
	vorige->oost = nieuwe;
	nieuwe->noord = vorige->noordoost;
	nieuwe->west = vorige;
	nieuwe->noordwest = vorige->noord;
}

void verbinden(int groote) {
	//pointertje om de lijst mee door te lopen
	class grid* tempHead = head;
	while (tempHead->zuid != NULL) {
		for (int i = 0; i < groote; i++)
		{
			ToevoegenVer(i, tempHead);
		}
		tempHead = tempHead->zuid;
	}

}

//afdrukken
void print() {
	class grid* tempHor = head;
	class grid* tempVer = head;
	while (tempVer != 0) {
		while (tempHor != 0) {
			cout << tempHor->data << " ";
			tempHor = tempHor->oost;
		}
		cout << endl;
		tempVer = tempVer->zuid;
		tempHor = head;
	}
	
	cout << endl;
}

int main()
{
	//hoofdmenu();
	head = 0;
	int groote = 10;
	for (int i = 0; i < groote; i++)
	{
		ToevoegenVer(i); 
	}
	verbinden(groote);
	print();

}
